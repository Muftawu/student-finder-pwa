@page "/login"
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h2 style="display: flex; justify-content: center; align-items: center;">Login to Student Finder</h2>
<div style="display: flex; flex-direction: row; justify-content: center; align-items: center;">
    <hr style="width: 50%;">
</div>

<div style="display: flex; flex-direction: row; justify-content: center; align-items: center;">

    <div style="display: flex; flex-direction: column;">
        <img style="width: 250px; height: 250px;" src="./media/sign-in.gif" />
    </div>

    <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">

        <Alert AlertType="@alertType" Message="@alertMessage"></Alert>

        <div class="mb-3 row" style="width: 500px;">
            <label for="email" class="col-sm-12 col-form-label">Email</label>
            <div class="col-sm-10">
                <input type="email" @bind="user.Email" class="form-control" id="email">
            </div>
        </div>

        <div class="mb-3 row" style="width: 500px;">
            <label for="password" class="col-sm-12 col-form-label">Password</label>
            <div class="col-sm-10">
                <input type="password" @bind="user.Password" class="form-control" id="password">
            </div>
        </div>

        <div class="mb-3 row" style="width: 500px;">
            <div class="col-sm-10">
                <button style="width: 400px;" @onclick="HandleLogin" type="button" class="btn btn-success">Login</button>
            </div>
        </div>

        <a href="/register">
            <p>Don't have an account yet? Sign Up</p>
        </a>

    </div>

</div>

@code {
   private LoginDTO user = new();
   private string? alertType;
   private string? alertMessage;

   private async Task HandleLogin()
   {   
        try
        {
            var json = JsonSerializer.Serialize(user);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var apiResponse = await Http.PostAsync(UserEndpoints.LoginURL, content);

            if (apiResponse.IsSuccessStatusCode)
            {
                var response = await apiResponse.Content.ReadFromJsonAsync<ApiResponseDTO>();
                if (response != null && response.Success)
                {
                    var token = response.Token?.ToString();
                    await LocalStorage.SetItemAsStringAsync("authToken", token!);
                    CustomAuthenticationStateProvider.MarkUserAsAuthenticated(token!);

                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                Console.WriteLine($"Server error: {apiResponse.ReasonPhrase}");
            }
        }  
        catch (Exception e)
        {
            Console.WriteLine($"Error signing in: {e.Message}");
        }
    }
}